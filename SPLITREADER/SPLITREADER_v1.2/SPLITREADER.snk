#IMPORT
import yaml
import glob
import os
import pandas as pd

conda_env = "SPLITREADER"

print("\n")
print("\t\t\t\t\t##############################")
print("\t\t\t\t\t       SPLITREADER V2.5")
print("\t\t\t\t\t   Baduel et al. MMB 2021")
print("\t\t\t\t\t       implemented by")
print("\t\t\t\t\t        Pierre Baduel")
print("\t\t\t\t\t##############################\n")


###################################################################################
#######################	 Preparation of the snakefile   ###########################
###################################################################################

configfile: "config.yml"

bam_files = glob.glob(os.path.join(config["DATA"]["BAM_DIR"], "*" + config["DATA"]["BAMEXT"] + ".bam"))

# Initiate variable : samples
samples = [os.path.splitext(os.path.basename(bam))[0].replace(config["DATA"]["BAMEXT"], '') for bam in bam_files]
config['samples'] = samples

# Create output folders
workspace_dir = config["DATA"]["WORKSPACE_DIR"]
cohortname = config["DATA"]["COHORTNAME"]

if not os.path.exists(os.path.join(workspace_dir, cohortname)):
    os.makedirs(os.path.join(workspace_dir, cohortname))
    os.makedirs(os.path.join(workspace_dir, 'BEDfiles', 'SPLITREADER'))

superfamily_TSD_df = pd.read_csv("TE_sequence/superfamily_TSD.txt", sep="\t", header=None, skiprows=1)
famName = superfamily_TSD_df[0].tolist() 

if not bam_files:
    raise ValueError("ERROR : No bam files found. Check config.yml.")

if not famName:
    raise ValueError("ERROR : No TE family found, check TE_sequence/superfamily_TSD.txt")

###################################################################################
####################################	Rules	###################################
###################################################################################

print('\t\t\t##############################################################')
print('\t\t\t##############################################################')
print('\t\t\t##############################################################')
print("\n")
print("Questions or comments to pbaduel(ar)bio.ens.psl.eu")
print("\n")
print("\t\t\t\t\t  SPLITREADER will run on :")
print("\n")
print(samples)
print("\n")

rule all:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"])

rule building_reference_genome_bowtie2_index:
    input:
        "Reference/{genome}.fasta".format(genome=config["DATA"]["GENOME"])
    output:
        "Reference/{genome}.1.bt2".format(genome=config["DATA"]["GENOME"]),
        "Reference/{genome}.2.bt2".format(genome=config["DATA"]["GENOME"]),
        "Reference/{genome}.3.bt2".format(genome=config["DATA"]["GENOME"]),
        "Reference/{genome}.4.bt2".format(genome=config["DATA"]["GENOME"]),
        "Reference/{genome}.rev.1.bt2".format(genome=config["DATA"]["GENOME"]),
        "Reference/{genome}.rev.2.bt2".format(genome=config["DATA"]["GENOME"])
		#protected("Reference/{genome}.fasta.fai".format(genome=config['genome'])),
		#protected("Reference/{genome}.norm.fasta".format(genome=config['genome']))
    params:
        script_dir = config["DATA"]["SCRIPT_DIR"],
        genome = config["DATA"]["GENOME"],
        workspace_dir = config["DATA"]["WORKSPACE_DIR"],
        ref_dir = config["DATA"]["REFERENCE"]
    shell:
        "bash {params.script_dir}/building_reference_genome_bt2_idx.sh {params.workspace_dir} {params.ref_dir} {params.genome}"

rule building_TE_sequence_library:
	input:
		genome = "Reference/{genome}.4.bt2".format(genome=config["DATA"]["GENOME"]),
		TE_lib = "TE_sequence/{TE_lib}.fasta".format(TE_lib=config["DATA"]["TE_LIB"]),
		TE_list = "TE_sequence/TE-list.txt",
		superfamily_TSD = "TE_sequence/superfamily_TSD.txt",
		TEfamily_superfamily = "TE_sequence/TEfamily-superfamily.txt"
	output:
		"TE_sequence/{TE_lib}.1.bt2".format(TE_lib=config["DATA"]["TE_LIB"]),
		"TE_sequence/{TE_lib}.2.bt2".format(TE_lib=config["DATA"]["TE_LIB"]),
		"TE_sequence/{TE_lib}.3.bt2".format(TE_lib=config["DATA"]["TE_LIB"]),
		"TE_sequence/{TE_lib}.4.bt2".format(TE_lib=config["DATA"]["TE_LIB"]),
		"TE_sequence/{TE_lib}.rev.1.bt2".format(TE_lib=config["DATA"]["TE_LIB"]),
		"TE_sequence/{TE_lib}.rev.2.bt2".format(TE_lib=config["DATA"]["TE_LIB"]),
		TE_info_all = "TE_sequence/TE-information-all.txt"
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		TE_lib = config["DATA"]["TE_LIB"]
	shell:
		"bash {params.script_dir}/building_TE_sequence_library.sh {params.workspace_dir} {params.TE_lib} {input.TE_lib} {input.TE_list} {input.superfamily_TSD} {input.TEfamily_superfamily}"
 
rule building_family_TE_list:
	input:
		"TE_sequence/{TE_lib}.rev.2.bt2".format(TE_lib=config["DATA"]["TE_LIB"])
	output:
		expand("TE_sequence/{fam}.TElist", fam=famName)
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],
		workspace_dir = config["DATA"]["WORKSPACE_DIR"]
	shell:
		"bash {params.script_dir}/building_family_TE_list.sh {params.workspace_dir}"

rule SPLITREADER_part1:
	input:
		rules.building_reference_genome_bowtie2_index.output,
		rules.building_TE_sequence_library.output,
		rules.building_family_TE_list.output,
		expand("{bam_dir}/{sample}{bamext}.bam", bam_dir=config["DATA"]["BAM_DIR"], sample=samples, bamext=config["DATA"]["BAMEXT"])		
		#get_input_bams
	output:
		"{workspace_dir}/{cohortname}/{sample}/part1/{sample}-TE.bam",
		"{workspace_dir}/{cohortname}/{sample}/part1/{sample}.SR1.e.txt"
	threads: config["PARAMS"]["SNAKEMAKE_THREADS"]
	params: 
		script_dir = config["DATA"]["SCRIPT_DIR"], 
		bam_dir = config["DATA"]["BAM_DIR"], 
		bamext = config["DATA"]["BAMEXT"], 
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"], 
		TE_lib = config["DATA"]["TE_LIB"],
		LS = config["PARAMS"]["LS"],
		tmp_dir = config["DATA"]["TMP_DIR"],
		script_threads = config["PARAMS"]["INTERNAL_THREADS"]
	shell: 
		"""
		bash_script={params.script_dir}/SPLITREADER-beta2.5_part1.sh
		sample={wildcards.sample}
		bam_dir={params.bam_dir}
		bamext={params.bamext}
		cohortname={params.cohortname}
		workspace_dir={params.workspace_dir}
		TE_lib={params.TE_lib}
		threads={params.script_threads}
		LS={params.LS}
		script_dir={params.script_dir}
		tmp_dir={params.tmp_dir}

		bash $bash_script $sample $bam_dir $bamext $cohortname $workspace_dir $TE_lib $script_dir $tmp_dir $LS $threads 2> $workspace_dir/$cohortname/$sample/part1/$sample.SR1.e.txt
		"""

rule SPLITREADER_part2:
	input:
		rules.SPLITREADER_part1.output
	output:
		"{workspace_dir}/{cohortname}/{sample}/part2/{sample}-insertion-sites.bed",
		"{workspace_dir}/{cohortname}/{sample}/part2/{sample}.SR2.o.txt",
		"{workspace_dir}/{cohortname}/{sample}/part2/{sample}.SR2.e.txt"
	threads: config["PARAMS"]["SNAKEMAKE_THREADS"]
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"], 
		genome = config["DATA"]["GENOME"],
		TE_annot = config["DATA"]["TE_ANNOTATION"],
		maxcov = config["PARAMS"]["MAXCOV"],
		LS = config["PARAMS"]["LS"],
		Length = config["PARAMS"]["LENGTH"],
		tmp_dir = config["DATA"]["TMP_DIR"],
		script_threads = config["PARAMS"]["INTERNAL_THREADS"]
	shell:
		"""
		bash_script={params.script_dir}/SPLITREADER-beta1.5_part2.sh
		sample={wildcards.sample}
		cohortname={params.cohortname}
		workspace_dir={params.workspace_dir}
		genome={params.genome}
		TE_annotation={params.TE_annot}
		threads={params.script_threads}
		maxcov={params.maxcov}
		LS={params.LS}
		Length={params.Length}
		tmp_dir={params.tmp_dir}

		bash $bash_script $sample $cohortname $workspace_dir $genome $TE_annotation $maxcov $tmp_dir $LS $threads $Length > $workspace_dir/$cohortname/$sample/part2/$sample.SR2.o.txt 2> $workspace_dir/$cohortname/$sample/part2/$sample.SR2.e.txt
		"""

rule SPLITREADER_sort:
	input:
		expand("{workspace_dir}/{cohortname}/{sample}/part2/{sample}-insertion-sites.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], sample=samples)
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/ALL/{sample}-insertion-sites.sort.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/ALL/{sample}.SRsort.e.txt"
		#"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/ALL/{sample}-insertion-sites.sort.bed",
		#"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/ALL/{sample}.SRsort.e.txt"
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		tmp_dir = config["DATA"]["TMP_DIR"]
	shell:
		"""
		bash_script={params.script_dir}/SPLITREADER-sort.sh
		sample={wildcards.sample}
		workspace_dir={params.workspace_dir}
		cohortname={params.cohortname}
		tmp_dir={params.tmp_dir}
		bash $bash_script $sample $workspace_dir $workspace_dir/BEDfiles/SPLITREADER/$cohortname $sample $cohortname $tmp_dir 2> $workspace_dir/BEDfiles/SPLITREADER/$cohortname/ALL/$sample.SRsort.e.txt
		"""

rule fam_wrapper:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/ALL/{sample}-insertion-sites.sort.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], sample=samples),
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/ALL/{sample}.SRsort.e.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], sample=samples)
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/{fam}.{sample}-completed.txt",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}.{sample}.SRfam.o",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}.{sample}.SRfam.e"
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		tmp_dir = config["DATA"]["TMP_DIR"]
	shell:
		"""
		bash_script={params.script_dir}/SRfam_wrapper.sh
		workspace_dir={params.workspace_dir}
		fam={wildcards.fam}
		sample={wildcards.sample}
		cohortname={params.cohortname}
		tmp_dir={params.tmp_dir}
		bash $bash_script $workspace_dir $fam $sample $workspace_dir/BEDfiles/SPLITREADER/$cohortname $tmp_dir > $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam.$sample.SRfam.o 2> $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam.$sample.SRfam.e
		"""

rule fam_wrapper_COMPLETED:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/{fam}.{sample}-completed.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName, sample=config['samples'])
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/{fam}.ALL-completed.txt"
	params:  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"]	
	shell:
		"""
		workspace_dir={params.workspace_dir}
		cohortname={params.cohortname}
		echo 'SRfam completed' > $workspace_dir/BEDfiles/SPLITREADER/$cohortname/{wildcards.fam}/{wildcards.fam}.ALL-completed.txt
		"""

ruleorder: fam_wrapper_COMPLETED > fam_wrapper ## POUR REGLER AMBIGUITE DANS SNAKEMAKE


rule intersect_insertions:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/{fam}.ALL-completed.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName)
	output:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/fam_intersect_completed.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName)
	params:  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		bamext = config["DATA"]["BAMEXT"],
		sample = config['samples'],
		fam = famName,
		script_dir = config["DATA"]["SCRIPT_DIR"]
	shell: 
		"""
		workspace_dir={params.workspace_dir}
		cohortname={params.cohortname}
		bamext={params.bamext}
		script_dir={params.script_dir}

		bash $script_dir/Intersect_insertions_splitreader.sh $workspace_dir $cohortname $bamext
		"""

rule filter_insertions_positive_coverage:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/fam_intersect_completed.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName)
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/fam_filtering_PC_completed.txt"
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		sample = config['samples'],
		depth = config["PARAMS"]["DEPTH"],
		bamext= config["DATA"]["BAMEXT"]
	shell:
		"""

		set +e

        workspace_dir={params.workspace_dir} 
        cohortname={params.cohortname}
		famNames=$(awk 'NR>1{{print $1}}' $workspace_dir/TE_sequence/superfamily_TSD.txt) 
        script_dir={params.script_dir}
        depth={params.depth}
		bamext={params.bamext}
        cd $workspace_dir/BAMs 
		SampleNames=($(ls *.bam | sed -e "s/${{bamext}}.bam$//")) 
		cd $workspace_dir 
		all_files_exist=true
		filtname="filt$depth"
        for fam in $famNames 
        do
            currdir=$workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam
            TEs=$(awk '{{print $1}}' $workspace_dir/TE_sequence/$fam.TElist) 

			for TE in $TEs 
			do
                cut -f 1-4 $currdir/$TE/$TE.$cohortname-intersect.bed > $currdir/$TE/$TE.$cohortname-intersect.cut.bed
                sortBed -i $currdir/$TE/$TE.$cohortname-intersect.cut.bed > $currdir/$TE/$TE.$cohortname-intersect.sort.bed
                mergeBed -d 5 -i $currdir/$TE/$TE.$cohortname-intersect.sort.bed > $currdir/$TE/$TE.$cohortname-intersect.sort1.bed 
                sortBed -i $currdir/$TE/$TE.$cohortname-intersect.sort1.bed > $currdir/$TE/$TE.$cohortname-intersect.mrg.bed

                if [ -s $currdir/$TE/$TE.$cohortname-intersect.mrg.bed ]; then
                    #echo -e -n "\tfilter DP$depth...\t"
                    perl $script_dir/Filter_insertions_splitreader.pl $cohortname $depth $workspace_dir $TE $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam/$TE 10 50 ${{SampleNames[*]}} > $currdir/$TE/$TE.$cohortname.SRfilt.e 2> $currdir/$TE/$TE.$cohortname.SRfilt.err

                else
                    #echo -e -n "\tno insertions detected...\tdone"
                    echo '' > $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam/$TE/$TE.$cohortname-insertions.filt$depth.DP$depth.bed
                fi

                
			cp --force $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam/$TE/$TE.$cohortname-insertions.filt$depth.DP$depth.bed $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam
			
			if [ ! -f $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam/$TE.$cohortname-insertions.filt$depth.DP$depth.bed ]; then
				all_files_exist=false
			fi
			

			done

			

			if $all_files_exist ; then
				touch $workspace_dir/BEDfiles/SPLITREADER/$cohortname/$fam/fam_filtering_PC_completed.txt
			fi
		done


		"""


rule end_filter_insertions_positive_coverage:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}/fam_filtering_PC_completed.txt", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName, depth=config["PARAMS"]["DEPTH"])
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}.{cohortname}-insertions.filt{depth}.DP{depth}.bed"
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		sample = config['samples'],
		depth = config["PARAMS"]["DEPTH"],
		fam = famName
	shell:
		"""
		
		set +e

		echo -e -n "\n\tall individual {wildcards.fam} filter DP{params.depth} COMPLETED!\n"        
                        
        cat {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}/*.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed > {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed

        # # #
		header=$(grep 'start' {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed | head -n1 )

        sed -i '/start/d' {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed

        sed -i '/^$/d' {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed

		#echo $header | tr " " "\t"| cat - {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed > {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/temp && mv {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/temp {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed

		echo -e "$(echo $header | tr " " "\t")\n$(cat {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed)" > {params.workspace_dir}/BEDfiles/SPLITREADER/{params.cohortname}/{wildcards.fam}.{params.cohortname}-insertions.filt{params.depth}.DP{params.depth}.bed


		"""

rule prep_insertions_BAM_readcount:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}.{cohortname}-insertions.filt{depth}.DP{depth}.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName, depth=config["PARAMS"]["DEPTH"])
	output:
		#"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.filt{depth}.DP{depth}.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertion-sites.0.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertion-sites.100up.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertion-sites.100down.bed"
	params:
		cohortname=config["DATA"]["COHORTNAME"],
		depth=config["PARAMS"]["DEPTH"],
		workspace_dir=config["DATA"]["WORKSPACE_DIR"]
	shell:
		"""
		filtname="filt{params.depth}"
		cohortname={params.cohortname}
		depth={params.depth}
		workspace_dir={params.workspace_dir}
		cd $workspace_dir/BEDfiles/SPLITREADER/
		currdir=$workspace_dir/BEDfiles/SPLITREADER
	
		echo -e "\nALL FAMS SPLITREADER CALLS DP$depth-filter COMPLETED!\n"      
        echo -e "Filtering $cohortname insertions: NC-filter...\n"

		cat $workspace_dir/BEDfiles/SPLITREADER/$cohortname/*.$cohortname-insertions.$filtname.DP$depth.bed > $workspace_dir/BEDfiles/SPLITREADER//$cohortname-insertions.$filtname.DP$depth.bed

		header=$(grep 'start' $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.bed | head -n1 )
        sed -i '/start/ d' $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.bed
		


		#echo $header | tr " " "\t" | cat - $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.bed > $currdir/temp && mv $currdir/temp $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.bed
		#rm $currdir/temp

		echo $header | tr " " "\t" | cat - $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.bed > $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.tmp && mv $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.tmp $workspace_dir/BEDfiles/SPLITREADER/$cohortname-insertions.$filtname.DP$depth.bed




        # # make list of insertions for bam-readcount
        cut -f 1-3 $cohortname-insertions.$filtname.DP$depth.bed > $cohortname-insertion-sites.0.bed
        sed -i '/start/ d' $cohortname-insertion-sites.0.bed 
        cut -f 1-3 $cohortname-insertions.$filtname.DP$depth.bed | awk -v OFS='\t' '{{$2 = $2 - 100; $3 = $3 - 100 ; if ( $3 > 0 ) print $1, $2, $3}}' > $cohortname-insertion-sites.100up.bed
        sed -i '/start/ d' $cohortname-insertion-sites.100up.bed 
        cut -f 1-3 $cohortname-insertions.$filtname.DP$depth.bed | awk -v OFS='\t' '{{$2 = $2 + 100; $3 = $3 + 100 ; print $1, $2, $3}}' > $cohortname-insertion-sites.100down.bed
        sed -i '/start/ d' $cohortname-insertion-sites.100down.bed
		"""

rule indexing_BAMs:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}/{fam}.{cohortname}-insertions.filt{depth}.DP{depth}.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], fam=famName, depth=config["PARAMS"]["DEPTH"]),
		expand("{bam_dir}/{sample}{bamext}.bam", bam_dir=config["DATA"]["BAM_DIR"], sample=samples, bamext=config["DATA"]["BAMEXT"])			
	output:
		"{bam_dir}/{sample}.bam.bai"
	params:
		workspace_dir=config["DATA"]["WORKSPACE_DIR"],
		bam_dir=config["DATA"]["BAM_DIR"],
		bamext=config["DATA"]["BAMEXT"]
	shell:
		"samtools index {params.bam_dir}/{wildcards.sample}.bam"

rule BAM_readcount:
	input:
		rules.prep_insertions_BAM_readcount.output,
		expand("{bam_dir}/{sample}{bamext}.bam.bai", workspace_dir=config["DATA"]["WORKSPACE_DIR"], bam_dir=config["DATA"]["BAM_DIR"], sample=samples, bamext=config["DATA"]["BAMEXT"])
	output:
		"{workspace_dir}/{cohortname}/{sample}/BAMrc/{sample}.{cohortname}-insertion.0.rc",
		"{workspace_dir}/{cohortname}/{sample}/BAMrc/{sample}.{cohortname}-insertion.100down.rc",
		"{workspace_dir}/{cohortname}/{sample}/BAMrc/{sample}.{cohortname}-insertion.100up.rc"
	params:
		script_dir = config["DATA"]["SCRIPT_DIR"],  
		cohortname = config["DATA"]["COHORTNAME"], 
		workspace_dir = config["DATA"]["WORKSPACE_DIR"],
		sample = config['samples'],
		depth = config["PARAMS"]["DEPTH"],
		bam_dir=config["DATA"]["BAM_DIR"],
		bamext=config["DATA"]["BAMEXT"],
		ref_dir=config["DATA"]["REFERENCE"],
		genome=config["DATA"]["GENOME"],
		tmp_dir=config["DATA"]["TMP_DIR"]
	shell:
		"""
		workspace_dir={params.workspace_dir}
		script_dir={params.script_dir}	
		bam_dir={params.bam_dir}
		bamext={params.bamext}
		depth={params.depth}
		cohortname={params.cohortname}
		ref_dir={params.ref_dir}
		genome={params.genome}
		currdir=$workspace_dir/$cohortname/{wildcards.sample}/BAMrc
		tmp_dir={params.tmp_dir}	

		$script_dir/BAM-readcount_wrapper.sh {wildcards.sample} $bam_dir $bamext {wildcards.sample} $depth $cohortname $currdir $workspace_dir/BEDfiles/SPLITREADER/ $ref_dir/ $genome.fasta $script_dir $tmp_dir

		"""

rule filter_negative_coverage:
	input:
		expand("{workspace_dir}/{cohortname}/{sample}/BAMrc/{sample}.{cohortname}-insertion.0.rc", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], sample=samples),
		expand("{workspace_dir}/{cohortname}/{sample}/BAMrc/{sample}.{cohortname}-insertion.100down.rc", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], sample=samples),
		expand("{workspace_dir}/{cohortname}/{sample}/BAMrc/{sample}.{cohortname}-insertion.100up.rc", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], sample=samples)
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.filt{depth}.NC.DP{depth}.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.ratioNCfilt{depth}.bool.DP{depth}.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.ratioNCfilt{depth}.DP{depth}.bed",
		"{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.ratioNCfilt{depth}.NConly.DP{depth}.bed"
	params:
		cohortname=config["DATA"]["COHORTNAME"],
		depth=config["PARAMS"]["DEPTH"],
		workspace_dir=config["DATA"]["WORKSPACE_DIR"],
		script_dir=config["DATA"]["SCRIPT_DIR"],
		bamext=config["DATA"]["BAMEXT"],
		maxcov=config["PARAMS"]["MAXCOV"],
		DPrefmin=config["PARAMS"]["DPrefmin"]
	shell:
		"""
		workspace_dir={params.workspace_dir}
		script_dir={params.script_dir}
		cohortname={params.cohortname}
		depth={params.depth}
		filtname="filt$depth"
		bamext={params.bamext}
		maxcov={params.maxcov}
		DPrefmin={params.DPrefmin}
		cd $workspace_dir/BEDfiles/SPLITREADER/
		currdir=$workspace_dir/BEDfiles/SPLITREADER
		maskname='nomask'

		cd $workspace_dir/BAMs 
		SampleNames=($(ls *.bam | sed -e "s/${{bamext}}.bam$//")) 
		cd $workspace_dir
		famName=$(awk 'NR>1{{print $1}}' $workspace_dir/TE_sequence/superfamily_TSD.txt)

		echo 'all BAMrc completed!'
		echo ${{famName[0]}}

		#header=$(head -n1 $currdir/$cohortname/${{famName[0]}}.$cohortname-insertions.$filtname.DP$depth.bed) 
        #echo  $header | tr " " "\t" | cat - $cohortname-insertions.$filtname.DP$depth.bed > $cohortname-insertions.$filtname.DP$depth.header.bed

		cut -f 1-4 $currdir/$cohortname-insertions.$filtname.DP$depth.bed > $currdir/$cohortname-insertion-sites.bed
		sed -i '/start/ d' $currdir/$cohortname-insertion-sites.bed 
		bedtools sort -i $currdir/$cohortname-insertion-sites.bed > $currdir/$cohortname-insertion-sites.sort.bed
		rm $currdir/$cohortname-insertion-sites.bed
            
		# if nomask simply copy all putative insertions otherwise add step to remove desired regions 
		cp $currdir/$cohortname-insertion-sites.sort.bed $currdir/$cohortname-insertions.$filtname.DP$depth.$maskname.bed

		echo "Merge and filter NC BED file"
		# # # ADD NEGATIVE COVERAGE

		sed -i '/^$/d' $currdir/$cohortname-insertions.$filtname.DP$depth.bed
		perl $script_dir/Filter_negative_calls_splitreader.pl $cohortname $depth $workspace_dir/BEDfiles/SPLITREADER $workspace_dir $filtname $DPrefmin $maxcov ${{SampleNames[*]}} 2> err.txt

		"""

rule end_SPLITREADER:
	input:
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.filt{depth}.NC.DP{depth}.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], depth=config["PARAMS"]["DEPTH"]),
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.ratioNCfilt{depth}.bool.DP{depth}.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], depth=config["PARAMS"]["DEPTH"]),
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.ratioNCfilt{depth}.DP{depth}.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], depth=config["PARAMS"]["DEPTH"]),
		expand("{workspace_dir}/BEDfiles/SPLITREADER/{cohortname}-insertions.ratioNCfilt{depth}.NConly.DP{depth}.bed", workspace_dir=config["DATA"]["WORKSPACE_DIR"], cohortname=config["DATA"]["COHORTNAME"], depth=config["PARAMS"]["DEPTH"])
	output:
		"{workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt"
	params:
		workspace_dir=config["DATA"]["WORKSPACE_DIR"],
		cohortname=config["DATA"]["COHORTNAME"],
		depth=config["PARAMS"]["DEPTH"],
		DPrefmin=config["PARAMS"]["DPrefmin"]
	shell:
		"""
		project_dir="{params.workspace_dir}/BEDfiles/SPLITREADER"
		depth={params.depth}
		subsetname={params.cohortname}
		filtname="filt$depth"
		DPrefmin={params.DPrefmin}
	
		echo "\n" | tee {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#############################################" | tee {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#                                           #" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#               SPLITREADER                 #" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#    Filter presence variant calls based    #" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#  on negative coverage ratios (NC-filter)  #" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#           Baduel et al. 2020              #" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#                                           #" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\t\t\t\t\t#############################################" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "Here are the four output files that are generated :" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "$project_dir/$subsetname-insertions.$filtname.NC.DP$depth.bed contains all the NC information but is not filtered for the ratio of negative coverage (ratioNCfilt): for each putative insertion sites it shows for each sample the coverage supporting the non-reference insertion / the coverage supporting the reference absence / the coverage 100bp up / the coverage100bp down." | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "$project_dir/$subsetname-insertions.ratioNC$filtname.bool.DP$depth.bed filters the putative insertions based on the ratioNCfilt with a 1 for samples where insertions have passed the filter, a 0 where they have not and the reference coverage is sufficient (>$DPrefmin reads) to be confident that the insertion is indeed absent, and - for the samples where the reference coverage is not sufficient to confirm the absence." | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "$project_dir/$subsetname-insertions.ratioNC$filtname.DP$depth.bed gives the coverage supporting the ratioNCfilt insertions" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "$project_dir/$subsetname-insertions.ratioNC$filtname.NConly.DP$depth.bed gives the reference coverage over ratioNCfilt insertion sites" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "all 4 output files start by 5 columns indicating the location (column 1, 2, 3: chr, start, stop) of the putative TE insertion, the name of the TE it is associated with (column 4: TEname), and the number of samples where it is detected as well as the total nb of split-reads supporting the insertion in these samples (column 5: popNB(NBsplit))" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "Questions or comments to pbaduel(ar)bio.ens.psl.eu" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "SPLITREADER finished" | tee -a {params.workspace_dir}/BEDfiles/SPLITREADER/end_SPLITREADER.txt
		echo "\n"
				"""

